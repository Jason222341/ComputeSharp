<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="..\build\Directory.Build.targets" />

  <!-- Check whether any analyzers are available for packing -->
  <PropertyGroup Condition="$(IsPackagedProject)">

    <!-- Source generator project, if available -->
    <IsSourceGeneratorAvailableForPacking>false</IsSourceGeneratorAvailableForPacking>
    <IsSourceGeneratorAvailableForPacking Condition="Exists('..\$(MSBuildProjectName).SourceGenerators')">true</IsSourceGeneratorAvailableForPacking>

    <!-- Code fixers project, if available -->
    <IsCodeFixersAvailableForPacking>false</IsCodeFixersAvailableForPacking>
    <IsCodeFixersAvailableForPacking Condition="Exists('..\$(MSBuildProjectName).CodeFixers')">true</IsCodeFixersAvailableForPacking>
  </PropertyGroup>

  <!-- Pack the source generator, if present -->
  <ItemGroup Condition="'$(IsSourceGeneratorAvailableForPacking)' == 'true'" Label="Package">
    
    <!-- Source generator reference (to trigger building the generator) -->
    <ProjectReference Include="..\$(MSBuildProjectName).SourceGenerators\$(MSBuildProjectName).SourceGenerators.csproj"
                      ReferenceOutputAssembly="false" />

    <!-- Pack the source generator from its output directory (source generators always use .NET Standard 2.0) -->
    <None Include="..\$(MSBuildProjectName).SourceGenerators\bin\$(Configuration)\netstandard2.0\$(MSBuildProjectName).SourceGenerators.dll"
          PackagePath="analyzers\dotnet\cs"
          Pack="true"
          Visible="false" />
  </ItemGroup>

  <!-- Pack the code fixers, if present -->
  <ItemGroup Condition="'$(IsCodeFixersAvailableForPacking)' == 'true'" Label="Package">
    
    <!-- Code fixers reference (to trigger building the project) -->
    <ProjectReference Include="..\$(MSBuildProjectName).CodeFixers\$(MSBuildProjectName).CodeFixers.csproj"
                      ReferenceOutputAssembly="false" />

    <!-- Pack the code fixers project from its output directory -->
    <None Include="..\$(MSBuildProjectName).CodeFixers\bin\$(Configuration)\netstandard2.0\$(MSBuildProjectName).CodeFixers.dll"
          PackagePath="analyzers\dotnet\cs"
          Pack="true"
          Visible="false" />
  </ItemGroup>

  <!--
    The following target has been ported from TerraFX.Interop.Windows.
    See: https://github.com/terrafx/terrafx.interop.windows.
    This generates the [module: SkipLocalsInit] attribute for all projects.
  -->
  <PropertyGroup>
    <GeneratedSkipLocalsInitFile Condition="'$(GeneratedSkipLocalsInitFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).SkipLocalsInit.g.cs</GeneratedSkipLocalsInitFile>
    <GeneratedSkipLocalsInitFileLines>
      <![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[module: System.Runtime.CompilerServices.SkipLocalsInitAttribute]]]>
    </GeneratedSkipLocalsInitFileLines>
  </PropertyGroup>
  <Target Name="GenerateSkipLocalsInit"
          BeforeTargets="BeforeCompile;CoreCompile"
          DependsOnTargets="PrepareForBuild"
          Condition="'$(Language)' == 'C#'"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(GeneratedSkipLocalsInitFile)">

    <!-- Write the file with the attribute -->
    <WriteLinesToFile Lines="$(GeneratedSkipLocalsInitFileLines)" Overwrite="true" WriteOnlyWhenDifferent="true" File="$(GeneratedSkipLocalsInitFile)" />

    <!-- Include the generated file in the list of files to compile -->
    <ItemGroup>
      <Compile Include="$(GeneratedSkipLocalsInitFile)" />
    </ItemGroup>
  </Target>

  <!-- Emit an error if our custom 'BeforeCommon' .targets file has not been invoked -->
  <Target Name="_ComputeSharpCheckForInvalidCustomBeforeMicrosoftCommonTargets"
          BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CoreCompile">
    <Error Condition ="'$(_ComputeSharpCustomBeforeMicrosoftCommonTargetsValid)' != 'true'"
           Text="The '_ComputeSharpCustomBeforeMicrosoftCommonTargetsValid' marker property is not set."/>
  </Target>
</Project>