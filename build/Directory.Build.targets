<Project>

  <!--
    Directory.Build.targets is automatically picked up and imported by
    Microsoft.Common.targets. This file needs to exist, even if empty so that
    files in the parent directory tree, with the same name, are not imported
    instead. The import fairly late and most other props/targets will have been
    imported beforehand. We also don't need to add ourselves to
    MSBuildAllProjects, as that is done by the file that imports us.
  -->

  <!--
    Additional global options for all projects targeting Windows in their TFMs.
    These must be in a .targets file because they need to read 'TargetFramework'.
  -->
  <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net8.0-windows'))">

    <!--
      Enable the CsWinRT trim/AOT analyzer for scenarios involving all types (including built-in types).
      The .NET SDK sets this to '1' (which excludes built-in types) by default to reduce false positives.
    -->
    <CsWinRTAotWarningLevel>2</CsWinRTAotWarningLevel>

    <!--
      We're only referencing CsWinRT for the source generators, we don't need to read any WinRT metadata.
      CsWinRT is in projection mode by default, so we want to disable it (or it'd need the Windows SDK).
    -->
    <CsWinRTGenerateProjection>false</CsWinRTGenerateProjection>

    <!-- We'll never have any IIDs to patch in this library -->
    <CsWinRTIIDOptimizerOptOut>true</CsWinRTIIDOptimizerOptOut>
  </PropertyGroup>

  <!--
    Manually set the version if null. This is copied from Microsoft.NET.DefaultAssemblyInfo.targets and is needed
    for cases where that target is not being automatically imported (which happens because MSBuild is used instead
    of dotnet build for some cases, due to the solution having some WinUI 3 projects). The lines setting the prefix
    have been omitted, as that is already handled in the root .props file.
  -->
  <PropertyGroup Condition="'$(Version)' == ''">
    <Version Condition="'$(VersionSuffix)' != ''">$(VersionPrefix)-$(VersionSuffix)</Version>
    <Version Condition="'$(Version)' == ''">$(VersionPrefix)</Version>
  </PropertyGroup>

  <!-- Set the base package version (this applies to all build types) -->
  <PropertyGroup>
    <PackageVersion>$(Version)</PackageVersion>
  </PropertyGroup>

  <!-- Settings that are only set for CI builds -->
  <PropertyGroup Condition="'$(GITHUB_RUN_ID)' != ''">
    <PackageVersion Condition="'$(EXCLUDE_RUN_ID_FROM_PACKAGE)' != 'true' AND '$(IsCommitOnReleaseBranch)' != true">$(Version).$(GITHUB_RUN_ID)</PackageVersion>
    <PackageVersion Condition="'$(GITHUB_SHA)' != ''">$(PackageVersion)+$(GITHUB_SHA)</PackageVersion>
  </PropertyGroup>

  <!-- Import all .tt files with their generated .g.cs files (the T4 service is imported in the .props file) -->
  <ItemGroup>
    <None Update="**\*.tt">
      <LastGenOutput>%(Filename).g.cs</LastGenOutput>
      <Generator>TextTemplatingFileGenerator</Generator>
    </None>
    <Compile Update="**\*.g.cs">
      <DependentUpon>$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)')).tt</DependentUpon>
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
    </Compile>
  </ItemGroup>
</Project>